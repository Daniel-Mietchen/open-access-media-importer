#!/usr/bin/env python
# -*- coding: utf-8 -*-

import csv, progressbar

from os import path
from sys import argv, stderr
from urllib2 import urlopen, urlparse

BUFSIZE = 1024000  # (1024KB)

try:
    action = argv[1]
    target = argv[2]
except IndexError:  # no arguments given
    stderr.write("""
oa-get – Open Access Importer download operations

usage:  oa-get download-metadata [source] |
        oa-get download-media [source]

""")
    exit(1)

try:
    assert(action in ['download-media', 'download-metadata'])
except AssertionError:  # invalid action
    stderr.write("Unknown action “%s”.\n" % action)
    exit(2)

try:
    exec "from sources import %s as source_module" % target
except ImportError:  # invalid source
    stderr.write("Unknown source “%s”.\n" % target)
    exit(3)

import config

if action == 'download-metadata':
    source_path = config.get_metadata_raw_source_path(target)
    url = None
    for result in source_module.download_metadata(source_path):
        if result['url'] != url:
            url = result['url']
            stderr.write("Downloading “%s”, saving into directory “%s” …\n" % \
                (url, source_path))
            p = progressbar.ProgressBar(maxval=result['total'])
        p.update(result['completed'])

if action == 'download-media':
    metadata_path = config.get_metadata_refined_source_path(target)
    success_cache_path = path.join(metadata_path, 'success_cache')
    download_cache_path = path.join(metadata_path, 'download_cache')

    media_path = config.get_media_raw_source_path(target)
    with open(success_cache_path, 'r') as success_cache:
        with open(download_cache_path, 'a') as download_cache:
            reader = csv.reader(success_cache)
            writer = csv.writer(download_cache)
            for row in reader:
                # see oa-cache for row definition
                license_url = row[7]
                if license_url == '':
                    continue
                if not license_url in config.free_license_urls:
                    stderr.write('Unknown, possibly non-free license: <%s>\n' %
                        license_url)
                    continue

                mimetype = row[11]
                if mimetype != 'video':
                    continue

                url = row[13]
                remote_file = urlopen(url)
                total = int(remote_file.headers['content-length'])
                completed = 0

                url_path = urlparse.urlsplit(url).path
                local_filename = path.join(media_path, \
                    url_path.split('/')[-1])

                # if local file has same size as remote file, skip download
                try:
                    if (path.getsize(local_filename) == total):
                        stderr.write("Skipping <%s>.\n" % url)
                        continue
                except OSError:  # local file does not exist
                    pass

                stderr.write("Downloading <%s>, saving into directory “%s” …\n" % \
                    (url, media_path))
                p = progressbar.ProgressBar(maxval=total)

                with open(local_filename,'wb') as local_file:
                    while True:
                        chunk = remote_file.read(BUFSIZE)
                        if chunk != '':
                            local_file.write(chunk)
                            completed += len(chunk)
                            p.update(completed)
                        else:
                            break

                row.append(local_filename)
                writer.writerow(row)
                download_cache.flush()
