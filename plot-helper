#!/usr/bin/env python
# -*- coding: utf-8 -*-

from sys import stdin, stderr
from pylab import figure, suptitle, bar, barh, legend, gcf, savefig
from matplotlib import ticker
from numpy import arange

import config

exec("stats = %s" % stdin.read())

def plot_mimetypes(license_type):
    mimetypes = stats['mimetypes'][license_type]
    # sort the values, zip and the * operator are used here for magic
    # see <http://docs.python.org/library/functions.html#zip>
    labels, values = zip(*sorted(mimetypes.iteritems(), key=lambda x: x[1]))

    fig1 = figure(figsize=(8,8))
    suptitle('MIME Types of Supplementary Materials under %s Licenses' % \
        license_type.capitalize())
    ax1 = fig1.add_subplot(1,1,1)

    ticks = range(len(labels))
    ax1.set_yticks(ticks)
    ax1.set_yticklabels(labels)

    ax1.set_xscale('log')
    ax1.xaxis.set_major_formatter(ticker.FormatStrFormatter('%d'))

    colors = []
    basecolor = '#babdb6'
    videocolor = '#8ae234'
    audiocolor = '#729fcf'
    imagecolor = '#ad7fa8'
    for l in labels:
        if l.startswith('video'):
            colors.append(videocolor)
        elif l.startswith('audio'):
            colors.append(audiocolor)
        elif l.startswith('image'):
            colors.append(imagecolor)
        else:
            colors.append(basecolor)

    b1 = barh(ticks, values, color=colors, align='center')
    videobar = bar([0], [0], color=videocolor)
    audiobar = bar([0], [0], color=audiocolor)
    imagebar = bar([0], [0], color=imagecolor)
    legend([videobar, audiobar, imagebar], ['video', 'audio', 'image'], loc=4)
    gcf().subplots_adjust(left=0.4)

    filename = 'mimetypes-%s.png' % license_type
    with open(filename, 'w') as f:
        savefig(f, format='png')
        stderr.write('Wrote figure to “%s”.\n' % filename)

def plot_licenses():
    licenses = dict(
        stats['licenses']['free'].items() +
        stats['licenses']['non-free'].items()
    )
    labels, values = zip(*sorted(licenses.iteritems(), key=lambda x: x[1]))

    fig1 = figure(figsize=(12,8))
    suptitle('Licensing of Supplementary Materials')
    ax1 = fig1.add_subplot(1,1,1)

    ticks = range(len(labels))
    ax1.set_yticks(ticks)
    ax1.set_yticklabels(labels)

    ax1.set_xscale('log')
    ax1.xaxis.set_major_formatter(ticker.FormatStrFormatter('%d'))

    colors = []
    nonecolor = '#babdb6'
    freecolor = '#729fcf'
    nonfreecolor = '#fcaf3e'
    for l in labels:
        if l == None:
            colors.append(nonecolor)
        if l in config.free_license_urls:
            colors.append(freecolor)
        else:
            colors.append(nonfreecolor)

    b1 = barh(ticks, values, color=colors, align='center')
    nonebar = bar([0], [0], color=nonecolor)
    freebar = bar([0], [0], color=freecolor)
    nonfreebar = bar([0], [0], color=nonfreecolor)
    legend(
        [nonebar, freebar, nonfreebar],
        ['no license', 'free license', 'non-free license'],
        loc=4
    )
    gcf().subplots_adjust(left=0.5)

    filename = 'licenses.png'
    with open(filename, 'w') as f:
        savefig(f, format='png')
        stderr.write('Wrote figure to “%s”.\n' % filename)

def csv_mimetypes_misreported():
    misreported = stats['mimetypes']['misreported']
    rows = misreported.keys()
    cols = set()
    for row in misreported:
        for col in misreported[row]:
            cols.add(col)

    import csv
    filename = 'mimetypes-misreported.csv'
    with open(filename, 'w') as f:
        writer = csv.writer(f, quoting=csv.QUOTE_ALL)
        rowdata = ['']
        for col in cols:
            rowdata.append(col)
        writer.writerow(rowdata)
        for row in rows:
            rowdata = [row]
            for col in cols:
                try:
                    rowdata.append(misreported[row][col])
                except KeyError:
                    rowdata.append(0)
            writer.writerow(rowdata)
    stderr.write('Wrote CSV data fo “%s”.\n' % filename)

def plot_mimetypes_by_publisher(license_type, mime_type):
    mimetypes = stats['mimetypes_prefix_publishers'][license_type][mime_type]
    labels, values = zip(*sorted(mimetypes.iteritems(), key=lambda x: x[1]))

    fig1 = figure(figsize=(8,8))
    suptitle('%s Supplementary Materials under %s Licenses by DOI Prefix' % \
        (mime_type.capitalize(), license_type.capitalize()))
    ax1 = fig1.add_subplot(1,1,1)

    ticks = range(len(labels))
    ax1.set_yticks(ticks)
    ax1.set_yticklabels(labels)

    ax1.set_xscale('log')
    ax1.xaxis.set_major_formatter(ticker.FormatStrFormatter('%d'))

    b1 = barh(ticks, values, color='#babdb6', align='center')

    filename = 'mimetypes-%s-%s.png' % (license_type, mime_type)
    with open(filename, 'w') as f:
        savefig(f, format='png')
        stderr.write('Wrote figure to “%s”.\n' % filename)

def plot_mimetypes_misreported_by_publisher():
    mimetypes_correct = stats['mimetypes_publishers']['correct']
    mimetypes_incorrect = stats['mimetypes_publishers']['incorrect']
    mimetypes_unknown = stats['mimetypes_publishers']['unknown']

    for m in mimetypes_correct:
        try:
            mimetypes_incorrect[m]
        except KeyError:
            mimetypes_incorrect[m] = 0

    for m in mimetypes_incorrect:
        try:
            mimetypes_correct[m]
        except KeyError:
            mimetypes_correct[m] = 0

    labels_correct, values_correct = zip(*sorted(mimetypes_correct.iteritems(), key=lambda x: x[0]))
    labels_incorrect, values_incorrect = zip(*sorted(mimetypes_incorrect.iteritems(), key=lambda x: x[0]))
    assert(labels_correct == labels_incorrect)

    fig1 = figure(figsize=(8,8))

    n_correct= sum(v for v in mimetypes_correct.values())
    n_incorrect = sum(v for v in mimetypes_incorrect.values())
    suptitle(
        'Supplementary Materials with misreported MIME type by DOI Prefix\n' + \
        '%s total: %s incorrect, approx %.1f %%' % (
                n_correct+n_incorrect,
                n_incorrect,
                float(n_incorrect)/n_correct*100
        )
    )

    ax1 = fig1.add_subplot(1,1,1)

    ticks = arange(len(labels_correct)) * 1.5
    ax1.set_yticks(ticks)
    ax1.set_yticklabels(labels_correct)

    #ax1.set_xscale('log')
    ax1.xaxis.set_major_formatter(ticker.FormatStrFormatter('%d'))

    bar_correct = barh(ticks, values_correct, color='#8ae234', align='center')
    bar_incorrect = barh(ticks+0.5, values_incorrect, color='#ef2929', align='center')

    filename = 'mimetypes-misreported-by-publisher.png'
    with open(filename, 'w') as f:
        savefig(f, format='png')
        stderr.write('Wrote figure to “%s”.\n' % filename)

if __name__ == '__main__':
    #plot_mimetypes('free')
    #plot_mimetypes('non-free'))
    #plot_licenses()
    #csv_mimetypes_misreported()
    plot_mimetypes_misreported_by_publisher()
    plot_mimetypes_by_publisher('free', 'audio')
    plot_mimetypes_by_publisher('free', 'video')
    plot_mimetypes_by_publisher('free', 'image')
    plot_mimetypes_by_publisher('non-free', 'audio')
    plot_mimetypes_by_publisher('non-free', 'video')
    plot_mimetypes_by_publisher('non-free', 'image')
